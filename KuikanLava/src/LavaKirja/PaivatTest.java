package LavaKirja;
// Generated by ComTest BEGIN
import java.io.File;
import LavaKirja.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END
import kanta.SailoException;

/**
 * Test class made by ComTest
 * @version 2017.07.27 15:31:56 // Generated by ComTest
 *
 */
public class PaivatTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa45 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa45() throws SailoException {    // Paivat: 45
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(); 
    assertEquals("From: Paivat line: 49", 0, paivat.getLkm()); 
    paivat.lisaa(paiva1); assertEquals("From: Paivat line: 50", 1, paivat.getLkm()); 
    paivat.lisaa(paiva2); assertEquals("From: Paivat line: 51", 2, paivat.getLkm()); 
    paivat.lisaa(paiva1); assertEquals("From: Paivat line: 52", 3, paivat.getLkm()); 
    Iterator<Paiva> it = paivat.iterator(); 
    assertEquals("From: Paivat line: 54", paiva1, it.next()); 
    assertEquals("From: Paivat line: 55", paiva2, it.next()); 
    assertEquals("From: Paivat line: 56", paiva1, it.next()); 
    paivat.lisaa(paiva1); assertEquals("From: Paivat line: 57", 4, paivat.getLkm()); 
    paivat.lisaa(paiva1); assertEquals("From: Paivat line: 58", 5, paivat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta87 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta87() throws SailoException {    // Paivat: 87
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(); 
    paiva1.vastaaPaivan(); 
    paiva2.vastaaPaivan(); 
    String hakemisto = "testipaivat"; 
    String tiedNimi = hakemisto+"/paivat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    paivat.lueTiedostosta(tiedNimi); 
    fail("Paivat: 101 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    paivat.lisaa(paiva1); 
    paivat.lisaa(paiva2); 
    paivat.tallenna(); 
    paivat = new Paivat(); 
    paivat.lueTiedostosta(tiedNimi); 
    Iterator<Paiva> i = paivat.iterator(); 
    assertEquals("From: Paivat line: 108", paiva1, i.next()); 
    assertEquals("From: Paivat line: 109", paiva2, i.next()); 
    assertEquals("From: Paivat line: 110", false, i.hasNext()); 
    paivat.lisaa(paiva2); 
    paivat.tallenna(); 
    assertEquals("From: Paivat line: 113", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Paivat line: 115", true, fbak.delete()); 
    assertEquals("From: Paivat line: 116", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPaivatIterator224 
   * @throws SailoException when error
   */
  @Test
  public void testPaivatIterator224() throws SailoException {    // Paivat: 224
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(); 
    paiva1.rekisteroi(); paiva2.rekisteroi(); 
    paivat.lisaa(paiva1); 
    paivat.lisaa(paiva2); 
    paivat.lisaa(paiva1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Paiva paiva:paivat) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+paiva.getTunnusNro()); 
    String tulos = " " + paiva1.getTunnusNro() + " " + paiva2.getTunnusNro() + " " + paiva1.getTunnusNro(); 
    assertEquals("From: Paivat line: 243", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Paiva>  i=paivat.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Paiva paiva = i.next(); 
    ids.append(" "+paiva.getTunnusNro()); 
    }
    assertEquals("From: Paivat line: 251", tulos, ids.toString()); 
    Iterator<Paiva>  i=paivat.iterator(); 
    assertEquals("From: Paivat line: 254", true, i.next() == paiva1); 
    assertEquals("From: Paivat line: 255", true, i.next() == paiva2); 
    assertEquals("From: Paivat line: 256", true, i.next() == paiva1); 
    try {
    i.next(); 
    fail("Paivat: 258 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi309 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi309() throws SailoException {    // Paivat: 309
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(); paiva1.parse("1|12.3.2015|500|500|500|500|5|500|500"); 
    Paiva paiva2 = new Paiva(); paiva2.parse("2|12.3.2015|500|500|500|500|5|500|500"); 
    Paiva paiva3 = new Paiva(); paiva3.parse("3|12.3.2015|500|500|500|500|5|500|500"); 
    Paiva paiva4 = new Paiva(); paiva4.parse("4|12.3.2015|500|500|500|500|5|500|500"); 
    Paiva paiva5 = new Paiva(); paiva5.parse("5|12.3.2015|500|500|500|500|5|500|500"); 
    paivat.lisaa(paiva1); paivat.lisaa(paiva2); paivat.lisaa(paiva3); paivat.lisaa(paiva4); paivat.lisaa(paiva5); 
    List<Paiva> loytyneet; 
    loytyneet = (List<Paiva>)paivat.etsi("*12*",1); 
    assertEquals("From: Paivat line: 320", 5, loytyneet.size()); 
    assertEquals("From: Paivat line: 321", false, loytyneet.get(0) == paiva3); 
    assertEquals("From: Paivat line: 322", false, loytyneet.get(1) == paiva4); 
    loytyneet = (List<Paiva>)paivat.etsi("*500*",2); 
    assertEquals("From: Paivat line: 325", 5, loytyneet.size()); 
    assertEquals("From: Paivat line: 326", false, loytyneet.get(0) == paiva3); 
    assertEquals("From: Paivat line: 327", false, loytyneet.get(1) == paiva5); 
    loytyneet = (List<Paiva>)paivat.etsi(null,-1); 
    assertEquals("From: Paivat line: 330", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa349 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa349() throws SailoException,CloneNotSupportedException {    // Paivat: 349
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(); 
    paiva1.rekisteroi(); paiva2.rekisteroi(); 
    assertEquals("From: Paivat line: 355", 0, paivat.getLkm()); 
    paivat.korvaaTaiLisaa(paiva1); assertEquals("From: Paivat line: 356", 1, paivat.getLkm()); 
    paivat.korvaaTaiLisaa(paiva2); assertEquals("From: Paivat line: 357", 2, paivat.getLkm()); 
    Paiva paiva3 = paiva1.clone(); 
    paiva3.aseta(3,"100"); 
    Iterator<Paiva> it = paivat.iterator(); 
    assertEquals("From: Paivat line: 361", true, it.next() == paiva1); 
    paivat.korvaaTaiLisaa(paiva3); assertEquals("From: Paivat line: 362", 2, paivat.getLkm()); 
    it = paivat.iterator(); 
    Paiva j0 = it.next(); 
    assertEquals("From: Paivat line: 365", paiva3, j0); 
    assertEquals("From: Paivat line: 366", true, j0 == paiva3); 
    assertEquals("From: Paivat line: 367", false, j0 == paiva1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista386 
   * @throws SailoException when error
   */
  @Test
  public void testPoista386() throws SailoException {    // Paivat: 386
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(), paiva3 = new Paiva(); 
    paiva1.rekisteroi(); paiva2.rekisteroi(); paiva3.rekisteroi(); 
    int id1 = paiva1.getTunnusNro(); 
    paivat.lisaa(paiva1); paivat.lisaa(paiva2); paivat.lisaa(paiva3); 
    assertEquals("From: Paivat line: 393", 1, paivat.poista(id1+1)); 
    assertEquals("From: Paivat line: 394", null, paivat.annaId(id1+1)); assertEquals("From: Paivat line: 394", 2, paivat.getLkm()); 
    assertEquals("From: Paivat line: 395", 1, paivat.poista(id1)); assertEquals("From: Paivat line: 395", 1, paivat.getLkm()); 
    assertEquals("From: Paivat line: 396", 0, paivat.poista(id1+3)); assertEquals("From: Paivat line: 396", 1, paivat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId413 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId413() throws SailoException {    // Paivat: 413
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(), paiva3 = new Paiva(); 
    paiva1.rekisteroi(); paiva2.rekisteroi(); paiva3.rekisteroi(); 
    int id1 = paiva1.getTunnusNro(); 
    paivat.lisaa(paiva1); paivat.lisaa(paiva2); paivat.lisaa(paiva3); 
    assertEquals("From: Paivat line: 420", true, paivat.annaId(id1  ) == paiva1); 
    assertEquals("From: Paivat line: 421", true, paivat.annaId(id1+1) == paiva2); 
    assertEquals("From: Paivat line: 422", true, paivat.annaId(id1+2) == paiva3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId435 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId435() throws SailoException {    // Paivat: 435
    Paivat paivat = new Paivat(); 
    Paiva paiva1 = new Paiva(), paiva2 = new Paiva(), paiva3 = new Paiva(); 
    paiva1.rekisteroi(); paiva2.rekisteroi(); paiva3.rekisteroi(); 
    int id1 = paiva1.getTunnusNro(); 
    paivat.lisaa(paiva1); paivat.lisaa(paiva2); paivat.lisaa(paiva3); 
    assertEquals("From: Paivat line: 442", 1, paivat.etsiId(id1+1)); 
    assertEquals("From: Paivat line: 443", 2, paivat.etsiId(id1+2)); 
  } // Generated by ComTest END
}